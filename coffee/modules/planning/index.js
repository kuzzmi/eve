// Generated by CoffeeScript 1.9.0
var BaseModule, Planning, Q, colors, config, moment, request, todoist, utils,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

BaseModule = require('../base');

request = require('request');

Q = require('q');

colors = require('colors');

todoist = require('node-todoist');

config = require('./config');

moment = require('moment');

utils = require('../../common/utils');

Planning = (function(_super) {
  __extends(Planning, _super);

  function Planning(_at_params, _at_selection) {
    this.params = _at_params;
    this.selection = _at_selection;
    Planning.__super__.constructor.call(this, this.params);
    this.action = this.getEntity('planning_action', null);
    this.item = this.getEntity('agenda_entry', null);
    this.priority = this.getEntity('planning_priority', 1);
    if (this.entities && this.entities.datetime) {
      this.datetime = this.entities.datetime[0];
    } else {
      this.datetime = {
        type: 'value',
        grain: 'second',
        value: moment().add(1, 'days').hours(23).minutes(59).seconds(59)
      };
    }
    this.datetime = moment(this.datetime.value).format('MMM Do h:mm a');
    this.loggedIn = false;
  }

  Planning.prototype.login = function() {
    var credentials, deferred;
    deferred = Q.defer();
    credentials = {
      email: config.email,
      password: config.password
    };
    todoist.login(credentials).then((function(_this) {
      return function(user) {
        _this.token = user.api_token;
        return user;
      };
    })(this)).then(deferred.resolve);
    return deferred.promise;
  };

  Planning.prototype.getProjects = function() {
    var deferred;
    deferred = Q.defer();
    todoist.request('getProjects').then(function(result) {
      console.log(result);
      return deferred.resolve({
        voice: {
          phrase: 'Reminder added'
        }
      });
    });
    return deferred.promise;
  };

  Planning.prototype.getUncompletedItems = function() {
    var deferred, params;
    deferred = Q.defer();
    params = {
      project_id: config.projects.PROJECTS
    };
    todoist.request('getUncompletedItems', params).then(function(response) {
      console.log(response);
      return deferred.resolve({
        voice: {
          phrase: 'You have ' + response.length + ' tasks'
        }
      });
    });
    return deferred.promise;
  };

  Planning.prototype.query = function(query) {
    var deferred, params, queries;
    deferred = Q.defer();
    queries = query.split(',').map(function(q) {
      return q.trim();
    });
    params = {
      queries: JSON.stringify(queries)
    };
    todoist.request('query', params).then(function(response) {
      return deferred.resolve(response);
    });
    return deferred.promise;
  };

  Planning.prototype.addItem = function() {
    var deferred, item;
    deferred = Q.defer();
    if (typeof this.item === 'string') {
      item = {
        content: utils.capitalize(this.item),
        token: this.token,
        priority: this.priority,
        date_string: this.datetime
      };
      todoist.request('addItem', item).then(function() {
        return deferred.resolve({
          voice: {
            phrase: 'Reminder added'
          }
        });
      });
    } else {
      console.log(this.item);
    }
    return deferred.promise;
  };

  Planning.prototype.exec = function() {
    var deferred;
    deferred = Q.defer();
    if (!this.loggedIn) {
      this.login().then((function(_this) {
        return function() {
          switch (_this.action) {
            case 'remind':
              return _this.addItem();
            case 'count':
              return _this.query('overdue, today').then(function(response) {
                return response.reduce(function(a, b) {
                  return a + b.data.length;
                }, 0);
              }).then(function(amount) {
                return {
                  voice: {
                    phrase: 'You have ' + amount + ' tasks'
                  }
                };
              });
          }
        };
      })(this)).then(function(response) {
        return Planning.__super__.exec.apply(this, arguments).then(deferred.resolve);
      })["catch"](function(e) {
        return console.log(e);
      });
    }
    return deferred.promise;
  };

  return Planning;

})(BaseModule);

module.exports = Planning;
