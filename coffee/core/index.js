// Generated by CoffeeScript 1.9.0
var Brain, EventEmitter, Q, Reflex, Stimulus, wit,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

wit = require('node-wit');

Q = require('q');

EventEmitter = require('events').EventEmitter;


/* EVE PARTS */

Stimulus = require('./models/stimulus');

Reflex = require('./classes/reflex');

Brain = (function(_super) {
  __extends(Brain, _super);

  Brain.prototype.memoryFile = __dirname + '/memory.json';

  function Brain(_at_params) {
    this.params = _at_params;
    this.subscribe();
  }

  Brain.prototype.subscribe = function() {
    this.on('stimulus', function(stimulus) {
      if (stimulus instanceof Object) {
        return this.process(new Stimulus(stimulus));
      } else {
        return this.process(stimulus);
      }
    });
    return this.on('output.voice', console.log);
  };

  Brain.prototype.understand = function(stimulus) {
    var deferred;
    deferred = Q.defer();
    if (stimulus.constructor === !Stimulus) {
      wit.captureTextIntent('OLTQRQAU6E4K5N2JJWZZJ7HAOHJV72XA', stimulus, function(err, res) {
        if (err) {
          deferred.reject(err);
        }
        if (!res) {
          deferred.reject(new Error('Empty response'));
        }
        return deferred.resolve(new Reflex(new Stimulus(res.outcomes[0])));
      });
    } else {
      deferred.resolve(new Reflex(stimulus));
    }
    return deferred.promise;
  };

  Brain.prototype.process = function(stimulus) {
    return this.understand(stimulus).then(function(reflex) {
      return reflex.exec();
    }).then(function(response) {
      if (response.text) {
        this.emit('output.text', response.text);
      }
      if (response.voice) {
        this.emit('output.voice', response.voice);
      }
      return response;
    }).fail(console.log)["catch"](console.log).done();
  };

  return Brain;

})(EventEmitter);

module["export"] = Brain;
